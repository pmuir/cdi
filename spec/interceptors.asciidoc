[[interceptors]]

== Interceptor bindings

Managed beans and EJB session and message-driven beans support interception. _Interceptors_ are used to separate cross-cutting concerns from business logic. The Java Interceptors specification defines the basic programming model and semantics. This specification defines a typesafe mechanism for associating interceptors to beans using _interceptor bindings_.

Interceptor bindings may be used to associate interceptors with any managed bean that is not itself an interceptor or decorator or with any EJB session or message-driven bean. Interceptors are not associated with the return value of a producer method or the current value of a producer field. An interceptor instance is a dependent object of the object it intercepts.

[[interceptorbindings]]

=== Interceptor binding types

An _interceptor binding type_ is a Java annotation defined as +@Retention(RUNTIME)+. Typically an interceptor binding is defined as +@Target({TYPE, METHOD})+ or +@Target(TYPE)+.

An interceptor binding type may be declared by specifying the +@javax.interceptor.InterceptorBinding+ meta-annotation.

----
@Inherited
@InterceptorBinding
@Target({TYPE, METHOD})
@Retention(RUNTIME)
public @interface Transactional {}
----

==== Interceptor binding types with additional interceptor bindings

An interceptor binding type may declare other interceptor bindings.

----
@Inherited
@InterceptorBinding
@Target({TYPE, METHOD})
@Retention(RUNTIME)
@Transactional
public @interface DataAccess {}
----

Interceptor bindings are transitiveÂ—an interceptor binding declared by an interceptor binding type is inherited by all beans and other interceptor binding types that declare that interceptor binding type.

Interceptor binding types declared +@Target(TYPE)+ may not be applied to interceptor binding types declared +@Target({TYPE, METHOD})+.

[[stereotypeinterceptorbindings]]

==== Interceptor bindings for stereotypes

Interceptor bindings may be applied to a stereotype by annotating the stereotype annotation:

----
@Transactional
@Secure
@RequestScoped
@Stereotype
@Target(TYPE)
@Retention(RUNTIME)
public @interface Action {}
----

An interceptor binding declared by a stereotype is inherited by any bean that declares that stereotype.

If a stereotype declares interceptor bindings, it must be defined as +@Target(TYPE)+.

[[declaringinterceptor]]

=== Declaring the interceptor bindings of an interceptor

The interceptor bindings of an interceptor are specified by annotating the interceptor class with the binding types and the +@javax.interceptor.Interceptor+ annotation and are called the set of interceptor bindings for the interceptor.

----
@Transactional @Interceptor
public class TransactionInterceptor {

   @AroundInvoke 
   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }

}
----

An interceptor class may declare multiple interceptor bindings.

Multiple interceptors may declare the same interceptor bindings.

If an interceptor does not declare an +@Interceptor+ annotation, it must be bound to beans using +@Interceptors+ or +ejb-jar.xml+.

All interceptors declared using +@Interceptor+ should specify at least one interceptor binding. If an interceptor declared using +@Interceptor+ does not declare any interceptor binding, non-portable behavior results.

An interceptor for lifecycle callbacks may only declare interceptor binding types that are defined as +@Target(TYPE)+. If an interceptor for lifecycle callbacks declares an interceptor binding type that not defined +@Target(TYPE)+, the container automatically detects the problem and treats it as a definition error.

=== Binding an interceptor to a bean

An interceptor binding may be declared by annotating the bean class, or a method of the bean class, with the interceptor binding type.

In the following example, the +TransactionInterceptor+ will be applied at the class level, and therefore applies to all business methods of the class:

----
@Transactional
public class ShoppingCart { ... }
----

In this example, the +TransactionInterceptor+ will be applied at the method level:

----
public class ShoppingCart {

   @Transactional 
   public void placeOrder() { ... }

}
----

A bean class or method of a bean class may declare multiple interceptor bindings.

The set of interceptor bindings for a method are those declared at class level, including those declared on stereotypes, combined with those declared at method level.

* An interceptor binding declared on a bean class replaces an interceptor binding of the same type declared by a stereotype that is applied to the bean class.
* An interceptor binding declared on a method replaces an interceptor binding of the same type declared, or inherited, at class level, or an interceptor binding of the same type declared by a stereotype that is applied to the bean class.


If the bean class of a managed bean declares or inherits a class level interceptor binding or a stereotype with interceptor bindings, it must not be declared final, or have any non-static, non-private, final methods. If a managed bean has a class-level interceptor binding and is declared final or has a non-static, non-private, final method, the container automatically detects the problem and treats it as a definition error.

If a non-static, non-private method of a bean class of a managed bean declares a method level interceptor binding, neither the method nor the bean class may be declared final. If a non-static, non-private, final method of a managed bean has a method level interceptor binding, the container automatically detects the problem and treats it as a definition error.

[[enabledinterceptors]]

=== Interceptor enablement and ordering

Interceptors may be enabled for an application, or enabled only for a particular bean archive.

An interceptor may be enabled for the entire application by listing its class, along with a priority attribute, under the +<interceptors>+ element of the +beans.xml+ file of the bean archive which contains the interceptor class.

----
<beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
   <interceptors>
      <class priority="100">org.mycompany.myfwk.TransactionInterceptor</class>
      <class priority="200">org.mycompany.myfwk.LoggingInterceptor</class>
   </interceptors>
</beans>
----

An interceptor may be enabled for a bean archive by listing its class under the +<interceptors>+ element of the +beans.xml+ file of the bean archive.

----
<beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
   <interceptors>
      <class>org.mycompany.myfwk.ValidationInterceptor</class>
      <class>org.mycompany.myfwk.SecurityInterceptor</class>
   </interceptors>
</beans>
----

An interceptor enabled for an application may be disabled for a bean archive by listing its class, along with a disabled flag, under the +<interceptors>+ element of the +beans.xml+ file of the bean archive.

----
<beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
   <interceptors>
      <class enabled="false">org.mycompany.myfwk.TransactionInterceptor</class>
   </interceptors>
</beans>
----

An interceptor may be given a default priority, but not enabled by listing its class, along with a disabled flag and the priority attribute, under the +<interceptors>+ element of the +beans.xml+ file of the bean archive which contains the interceptor class.

----
<beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
   <interceptors>
      <class enabled="false" priority="100">org.mycompany.myfwk.TransactionInterceptor</class>
   </interceptors>
</beans>
----

An interceptor with a default priority may be enabled for a bean archive by listing its class, along with an enabled flag, under the +<interceptors>+ element of the +beans.xml+ file of the bean archive.

----
<beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
   <interceptors>
      <class enabled="true">org.mycompany.myfwk.TransactionInterceptor</class>
   </interceptors>
</beans>
----

OPEN ISSUE: Can other libraries disable interceptors and change the priority? If so, which one wins?

OPEN ISSUE: If a library defines an enabled or default priority interceptor, can it be disabled or enabled for the entire application?

OPEN ISSUE: Should we add a way to specify the priority by annotation?

The priority of the interceptor declaration, defined in <<priorities>>, determines the default interceptor ordering for the application. The order of the interceptor declarations for a bean archive overrides the default interceptor order. If the set of interceptors enabled for the application and the set of interceptors enabled for a bean archive are disjoint, then the interceptors enabled for the bean archive are given an incrementing priority starting at 1000. Interceptors which occur earlier in the list are called first.

Each child +<class>+ element must specify the name of an interceptor class. If there is no class with the specified name, or if the class with the specified name is not an interceptor class, the container automatically detects the problem and treats it as a deployment problem.

If the same class is listed twice under the +<interceptors>+ element, the container automatically detects the problem and treats it as a deployment problem.

Interceptors declared using +@Interceptors+ or in +ejb-jar.xml+ are called before interceptors declared using interceptor bindings.

Interceptors are called before decorators.

An interceptor is said to be _enabled_ if it is enabled in at least one bean archive.

[[interceptorresolution]]

=== Interceptor resolution

The process of matching interceptors to a certain lifecycle callback method, EJB timeout method or business method of a certain bean is called _interceptor resolution_.

For a lifecycle callback method, the interceptor bindings include the interceptor bindings declared or inherited by the bean at the class level, including, recursively, interceptor bindings declared as meta-annotations of other interceptor bindings and stereotypes.

For a business method or EJB timeout method, the interceptor bindings include the interceptor bindings declared or inherited by the bean at the class level, including, recursively, interceptor bindings declared as meta-annotations of other interceptor bindings and stereotypes, together with all interceptor bindings declared at the method level, including, recursively, interceptor bindings declared as meta-annotations of other interceptor bindings.

An interceptor is bound to a method if:

* The method has all the interceptor bindings of the interceptor. A method has an interceptor binding of an interceptor if it has an interceptor binding with (a) the same type and (b) the same annotation member value for each member which is not annotated +@javax.enterprise.util.Nonbinding+.
* The interceptor intercepts the given kind of lifecycle callback or business method.
* The interceptor is enabled in the bean archive containing the bean.


For a custom implementation of the +Interceptor+ interface defined in <<interceptor>>, the container calls +getInterceptorBindings()+ to determine the interceptor bindings of the interceptor and +intercepts()+ to determine if the interceptor intercepts a given kind of lifecycle callback, EJB timeout or business method.

==== Interceptors with multiple bindings

An interceptor class may specify multiple interceptor bindings.

----
@Transactional @Secure @Interceptor
public class TransactionalSecurityInterceptor {

   @AroundInvoke 
   public Object aroundInvoke(InvocationContext context) throws Exception { ... }

}
----

This interceptor will be bound to all methods of this bean:

----
@Transactional @Secure
public class ShoppingCart { ... }
----

The interceptor will also be bound to the +placeOrder()+ method of this bean:

----
@Transactional
public class ShoppingCart {

   @Secure
   public void placeOrder() { ... }
 
}
----

However, it will not be bound to the +placeOrder()+ method of this bean, since the +@Secure+ interceptor binding does not appear:

----
@Transactional
public class ShoppingCart {

   public void placeOrder() { ... }
 
}
----

[[interceptorbindingmembers]]

==== Interceptor binding types with members

Interceptor binding types may have annotation members.

----
@Inherited
@InterceptorBinding
@Target({TYPE, METHOD})
@Retention(RUNTIME)
public @interface Transactional {
   boolean requiresNew() default false;
}
----

Any interceptor with that interceptor binding type must select a member value:

----
@Transactional(requiresNew=true) @Interceptor
public class RequiresNewTransactionInterceptor {

   @AroundInvoke 
   public Object manageTransaction(InvocationContext ctx) throws Exception { ... }

}
----

The +RequiresNewTransactionInterceptor+ applies to this bean:

----
@Transactional(requiresNew=true)
public class ShoppingCart { ... }
----

But not to this bean:

----
@Transactional
public class ShoppingCart { ... }
----

Annotation member values are compared using +equals()+.

An annotation member may be excluded from consideration using the +@Nonbinding+ annotation.

----
@Inherited
@InterceptorBinding
@Target({TYPE, METHOD})
@Retention(RUNTIME)
public @interface Transactional {
   @Nonbinding boolean requiresNew() default false;
}
----

Array-valued or annotation-valued members of an interceptor binding type should be annotated +@Nonbinding+ in a portable application. If an array-valued or annotation-valued member of an interceptor binding type is not annotated +@Nonbinding+, non-portable behavior results.

If the set of interceptor bindings of a bean class or interceptor, including bindings inherited from stereotypes and other interceptor bindings, has two instances of a certain interceptor binding type and the instances have different values of some annotation member, the container automatically detects the problem and treats it as a definition error.

