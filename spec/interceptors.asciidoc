[[interceptors]]

== Interceptor bindings

Managed beans and EJB session and message-driven beans support interception. _Interceptors_ are used to separate cross-cutting concerns from business logic. The Java Interceptors specification defines the basic programming model and semantics, and how to associate interceptors with target classes. This specification defines various extensions to the Java Interceptors specification, including how to override the interceptor order defined by the +@Priority+ annotation.

[[interceptor_bindings]]

=== Interceptor binding types

This specification extends the Java Interceptors specification and allows interceptor bindings to be applied to CDI stereotypes.

[[stereotype_interceptor_bindings]]

==== Interceptor bindings for stereotypes

Interceptor bindings may be applied to a stereotype by annotating the stereotype annotation:

[source, java]
----
@Transactional
@Secure
@RequestScoped
@Stereotype
@Target(TYPE)
@Retention(RUNTIME)
public @interface Action {}
----

An interceptor binding declared by a stereotype is inherited by any bean that declares that stereotype.

If a stereotype declares interceptor bindings, it must be defined as +@Target(TYPE)+.

[[declaring_interceptor]]

=== Declaring the interceptor bindings of an interceptor

This specification extends the Java Interceptors specification and defines how the container must behave if a definition error is encountered.

If an interceptor for lifecycle callbacks declares an interceptor binding type that not defined +@Target(TYPE)+, the container automatically detects the problem and treats it as a definition error.

[[binding_interceptor_to_bean]]

=== Binding an interceptor to a bean

This specification extends the Java Interceptors specification and defines:

* how the container must behave if a definition error is encountered, and
* how interceptors are bound using stereotypes.

The set of interceptor bindings for a method are those declared at class level includes those declared on stereotypes. An interceptor binding declared on a bean class replaces an interceptor binding of the same type declared by a stereotype that is applied to the bean class.

If a managed bean has a class-level interceptor binding and is declared final or has a non-static, non-private, final method, the container automatically detects the problem and treats it as a definition error.

If a non-static, non-private, final method of a managed bean has a method level interceptor binding, the container automatically detects the problem and treats it as a definition error.

[[enabled_interceptors]]

=== Interceptor enablement and ordering

This specification extends the Java Interceptors specification and defines:

* support for enabling interceptors only for a bean archive, as defined by Contexts and Dependency Injection 1.0, and
* the ability to override the interceptor order using the portable extension SPI, defined in <<atd>>.

An interceptor may be explicitly enabled for a bean archive by listing its class under the +<interceptors>+ element of the +beans.xml+ file of the bean archive.

----
<beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
   <interceptors>
      <class>org.mycompany.myfwk.TransactionInterceptor</class>
      <class>org.mycompany.myfwk.LoggingInterceptor</class>
   </interceptors>
</beans>]]>
----

The order of the interceptor declarations determines the interceptor ordering. Interceptors which occur earlier in the list are called first.

Each child +<class>+ element must specify the name of an interceptor class. If there is no class with the specified name, or if the class with the specified name is not an interceptor class, the container automatically detects the problem and treats it as a deployment problem.

If the same class is listed twice under the +<interceptors>+ element, the container automatically detects the problem and treats it as a deployment problem.

Interceptors declared using +@Interceptors+, declared in +ejb-jar.xml+ or enabled using +@Priority+ are called before interceptors enabled using +beans.xml+.

An interceptor is said to be *enabled* if it is enabled in at least one bean archive or has the +@Priority+ annotation.

[[interceptor_resolution]]

=== Interceptor resolution

This specification extends the Java Interceptors specification and defines:

* the effect of applying +@Nonbinding+ to an interceptor binding member, and
* how the interceptor bindings of a custom implementation of the +Interceptor+ interface are determined.

If any interceptor binding has a member annotated +@javax.enterprise.util.Nonbinding+, the member is ignored when performing interceptor resolution, and the method does not need to have the same annotation member value.

For a custom implementation of the +Interceptor+ interface defined in <<interceptor>>, the container calls +getInterceptorBindings()+ to determine the interceptor bindings of the interceptor and +intercepts()+ to determine if the interceptor intercepts a given kind of lifecycle callback, EJB timeout or business method.

