[[packagingdeployment]]

== Packaging and deployment

When an application is started, the container must perform _bean discovery_, detect definition errors and deployment problems and raise events that allow portable extensions to integrate with the deployment lifecycle.

Bean discovery is the process of determining:

* The bean archives that exist in the application, and the beans they contain
* Which alternatives, interceptors and decorators are _enabled_ for each bean archive
* The _ordering_ of enabled interceptors and decorators


Additional beans may be registered programmatically with the container by the application or a portable extension after the automatic bean discovery completes. Portable extensions may even integrate with the process of building the +Bean+ object for a bean, to enhance the container's built-in functionality.

[[beanarchive]]

=== Bean archives

Bean classes of enabled beans must be deployed in _bean archives_.

* A library jar, EJB jar, application client jar or rar archive is a bean archive if it has a file named +beans.xml+ in the +META-INF+ directory.
* The +WEB-INF/classes+ directory of a war is a bean archive if there is a file named +beans.xml+ in the +WEB-INF+ directory or in the +WEB-INF/classes/META-INF+ directory of the war. If a war has a file named +beans.xml+ in both the +WEB-INF+ directory and in the +WEB-INF/classes/META-INF+ directory, then non-portable behavior results. Portable applications must have a +beans.xml+ file in only one of the +WEB-INF+ or the +WEB-INF/classes/META-INF+ directories.
* A directory in the JVM classpath is a bean archive if it has a file named +beans.xml+ in the +META-INF+ directory.


The container is not required to support application client jar bean archives.

A Java EE container is required by the Java EE specification to support Java EE modules. Other containers may or may not provide support for war, EJB jar or rar bean archives.

The container searches for beans in all bean archives in the application classpath:

* In an application deployed as an ear, the container searches every bean archive bundled with or referenced by the ear, including bean archives bundled with or referenced by wars and EJB jars contained in the ear. The bean archives might be library jars, EJB jars, rars or war +WEB-INF/classes+ directories.
* In an application deployed as a war, the container searches every bean archive bundled with or referenced by the war. The bean archives might be library jars or the +WEB-INF/classes+ directory.
* In an application deployed as an EJB jar, the container searches the EJB jar, if it is a bean archive, and every bean archive referenced by the EJB jar.
* An embeddable EJB container searches each bean archive in the JVM classpath that is listed in the value of the embeddable container initialization property +javax.ejb.embeddable.modules+, or every bean archive in the JVM classpath if the property is not specified. The bean archives might be directories, library jars or EJB jars.


When searching for beans, the container considers:

* any Java class in any bean archive,
* any +ejb-jar.xml+ file in the metadata directory of any EJB bean archive,
* any Java class referenced by the +@New+ qualifier of an injection point of another bean, and
* any interceptor or decorator class declared in the +beans.xml+ file of any bean archive.


If a bean class is deployed in two different bean archives, non-portable behavior results. Portable applications must deploy each bean class in no more than one bean archive.

If an enum declaring injection points is defined in installed library jars, non-portable behavior results.

Bean archives may contain classes which are not deployed as beans. For example a bean archive might contain message-driven beans.

An extension may be deployed in any archive, including those that are not bean archives.

[[initialization]]

=== Application initialization lifecycle

When an application is started, the container performs the following steps:

* First, the container must search for service providers for the service +javax.enterprise.inject.spi.Extension+ defined in <<initevents>>, instantiate a single instance of each service provider, and search the service provider class for observer methods of initialization events.
* Next, the container must fire an event of type +BeforeBeanDiscovery+, as defined in <<bbd>>.
* Next, the container must fire an event of type +ProcessModule+ for every bean archive, as defined in <<pm>>.
* Next, the container must perform bean discovery, and abort initialization of the application if any definition errors exist, as defined in <<exceptions>>. Additionally, for every Java EE component class supporting injection that may be instantiated by the container at runtime, the container must create an +InjectionTarget+ for the class, as defined in <<it>>, and fire an event of type +ProcessInjectionTarget+, as defined in <<pit>>.
* Next, the container must fire an event of type +AfterBeanDiscovery+, as defined in <<abd>>, and abort initialization of the application if any observer registers a definition error.
* Next, the container must detect deployment problems by validating bean dependencies and specialization and abort initialization of the application if any deployment problems exist, as defined in <<exceptions>>.
* Next, the container must fire an event of type +AfterDeploymentValidation+, as defined in <<adv>>, and abort initialization of the application if any observer registers a deployment problem.
* Next, the container must inject any enums declaring injection points.
* Finally, the container begins directing requests to the application.


[[shutdown]]

=== Application shutdown lifecycle

When an application is stopped, the container performs the following steps:

* First, the container must destroy all contexts.
* Next, the container must destroy dependent objects injected into enums.
* Finally, the container must fire an event of type +BeforeShutdown+, as defined in <<bs>>.


[[beandiscovery]]

=== Bean discovery

The container automatically discovers managed beans (according to the rules of <<whatclassesarebeans>>) and session beans in bean archives and searches the bean classes for producer methods, producer fields, disposer methods and observer methods.

For each Java class or interface deployed in a bean archive, the container must:

* create an +AnnotatedType+ representing the type and fire an event of type +ProcessAnnotatedType+, as defined in <<pat>>, and then
* inspect the type metadata to determine if it is a bean or other Java EE component class supporting injection, and then
* detect definition errors by validating the class and its metadata, and then
* if the class is a managed bean, session bean, or other Java EE component class supporting injection, create an +InjectionTarget+ for the class, as defined in <<it>>, and fire an event of type +ProcessInjectionTarget+, as defined in <<pit>>, and then
* if the class is an enabled bean, interceptor or decorator, create a +Bean+ object that implements the rules defined in <<managedbeanlifecycle>>, <<statefullifecycle>> or <<statelesslifecycle>>, and fire an event which is a subtype of +ProcessBean+, as defined in <<pb>>.


For each enabled bean, the container must search the class for producer methods and fields, including resources, and for each producer method or field:

* create a +Producer+, as defined in <<it>>, and fire an event of type +ProcessProducer+, as defined in <<pp>>, and then
* if the producer method or field is enabled, create a +Bean+ object that implements the rules defined in <<producermethodlifecycle>>, <<producerfieldlifecycle>> or <<resourcelifecycle>>, and fire an event which is a subtype of +ProcessBean+, as defined in <<pb>>.


For each enabled bean, the container must search the class for observer methods, and for each observer method:

* create an +ObserverMethod+ object, as defined in <<observermethod>> and fire an event of type +ProcessObserverMethod+, as defined in <<pom>>.


The container determines which alternatives, interceptors and decorators are enabled, according to the rules defined in <<enablement>>, <<enabledinterceptors>> and <<enableddecorators>>, taking into account any +<alternatives>+, +<interceptors>+ and +<decorators>+ declarations in the +beans.xml+ files, and registers the +Bean+ and +ObserverMethod+ objects:

* For each enabled bean that is not an interceptor or decorator, the container registers an instance of the +Bean+ interface defined in <<bean>>.
* For each enabled interceptor, the container registers an instance of the +Interceptor+ interface defined in <<interceptor>>.
* For each enabled decorator, the container registers an instance of the +Decorator+ interface defined in <<decorator>>.
* For each observer method of every enabled bean, the container registers an instance of the +ObserverMethod+ interface defined in <<observermethod>>.


[[el]]

=== Integration with Unified EL

The container must provide a Unified EL +ELResolver+ to the servlet engine and JSF implementation that resolves bean names using the rules of name resolution defined in <<nameresolution>> and resolving ambiguities according to <<ambignames>>.

* If a name used in an EL expression does not resolve to any bean, the +ELResolver+ must return a null value.
* Otherwise, if a name used in an EL expression resolves to exactly one bean, the +ELResolver+ must return a contextual instance of the bean, as defined in <<contextualinstance>>.


